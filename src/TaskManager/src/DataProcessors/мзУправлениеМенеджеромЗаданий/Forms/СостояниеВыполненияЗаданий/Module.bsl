#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьТекущиеЗадания();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отказ = Истина;
	Оповещение = Новый ОписаниеОповещения("ЗакрытьФормуПослеПодтверждения", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Вы уверены, что хотите закрыть данную форму?", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПослеПодтверждения(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеЗаданий", 60, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТаблицаЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ПоказатьЛогЗадания();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьУправлениеЗаданиями(Команда)

	ОткрытьФорму("Обработка.мзУправлениеМенеджеромЗаданий.Форма.Форма");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗаданий(Команда)

	ОбновитьСостояниеЗаданийНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛог(Команда)

	ПоказатьЛогЗадания();

КонецПроцедуры

&НаКлиенте
Процедура НайтиТекущиеЗадания(Команда)

	ЗаполнитьТекущиеЗадания();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьСостояниеЗаданий()

	ОбновитьСостояниеЗаданийНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЗаданийНаСервере()

	Для Каждого СтрокаЗадания Из ТаблицаЗаданий Цикл

		Если Не ЗначениеЗаполнено(СтрокаЗадания.КлючЗадания) Тогда
			СтрокаЗадания.Состояние = 0;
			СтрокаЗадания.ЕстьОшибки = 0;
			СтрокаЗадания.ПроцентВыполнения = 0;
			Продолжить;
		КонецЕсли;

		Если мзЗадания.ЕстьОшибкиВыполнения(СтрокаЗадания.КлючЗадания) Тогда
			СтрокаЗадания.ЕстьОшибки = 1;
		Иначе
			СтрокаЗадания.ЕстьОшибки = 0;
		КонецЕсли;

		СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(СтрокаЗадания.КлючЗадания);

		Если СостояниеЗадания = Перечисления.мзСостоянияЗаданий.Выполнено Тогда

			СтрокаЗадания.Состояние = 5;

		ИначеЕсли СостояниеЗадания = Перечисления.мзСостоянияЗаданий.Выполняется Тогда

			СтрокаЗадания.Состояние = 1;

		ИначеЕсли СостояниеЗадания = Перечисления.мзСостоянияЗаданий.Отменено Тогда

			СтрокаЗадания.Состояние = 6;

		ИначеЕсли СостояниеЗадания = Перечисления.мзСостоянияЗаданий.НаПаузе Тогда

			СтрокаЗадания.Состояние = 4;

		ИначеЕсли СостояниеЗадания = Перечисления.мзСостоянияЗаданий.Ожидает
				  Или СостояниеЗадания = Перечисления.мзСостоянияЗаданий.ОжидаетВыделенногоИсполнителя Тогда

			СтрокаЗадания.Состояние = 0;

		КонецЕсли;

		СтрокаЗадания.ПроцентВыполнения = мзЗадания.ПроцентВыполненияЗадания(СтрокаЗадания.КлючЗадания);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛогЗадания()

	ТекСтрока = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.КлючЗадания) Тогда
		мзОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет лога для отображения");
		Возврат;
	КонецЕсли;

	ЗаголовокЛога = СтрШаблон("Лог задания %1", ТекСтрока.КлючЗадания);

	Лог = Новый ТекстовыйДокумент;
	Лог.УстановитьТекст(ТекстЛога(ТекСтрока.КлючЗадания));
	Лог.Показать(ЗаголовокЛога);

КонецПроцедуры

&НаСервере
Функция ТекстЛога(КлючЗадания)

	Возврат мзЗадания.ТекстЛога(КлючЗадания);

КонецФункции

&НаСервере
Функция ЕстьНеЗавершенныеЗадания()

	ЕстьНеЗавершенные = Ложь;

	Для Каждого СтрокаЗадания Из ТаблицаЗаданий Цикл

		Если Не ЗначениеЗаполнено(СтрокаЗадания.КлючЗадания) Тогда
			Продолжить;
		КонецЕсли;

		СостояниеЗадания = мзЗадания.ПолучитьСостояниеЗадания(СтрокаЗадания.КлючЗадания);

		Если СостояниеЗадания = Перечисления.мзСостоянияЗаданий.Выполнено
			 Или СостояниеЗадания = Перечисления.мзСостоянияЗаданий.Отменено Тогда

			Продолжить;
		КонецЕсли;

		ТекстСообщения = СтрШаблон("Задание %1 еще не завершено", СтрокаЗадания.КлючЗадания);
		мзОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ЕстьНеЗавершенные = Истина;

	КонецЦикла;

	Возврат ЕстьНеЗавершенные;

КонецФункции

&НаСервере
Процедура ЗаполнитьТекущиеЗадания()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Максимум(мзЗадания.Период) КАК Период,
	|	мзЗадания.Метод
	|ПОМЕСТИТЬ ВТ_ПоследниеЗадания
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|Сгруппировать по
	|	мзЗадания.Метод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеЗадания.Метод
	|ИЗ
	|	ВТ_ПоследниеЗадания КАК ВТ_ПоследниеЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мзЗадания.Период КАК Период,
	|	мзЗадания.Ключ,
	|	мзЗадания.Состояние,
	|	мзЗадания.Метод КАК Метод,
	|	мзЗадания.Параметры,
	|	мзЗадания.НачалоВыполнения КАК НачалоВыполнения
	|ИЗ
	|	РегистрСведений.мзЗадания КАК мзЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеЗадания КАК ВТ_ПоследниеЗадания
	|		ПО мзЗадания.Период = ВТ_ПоследниеЗадания.Период
	|УПОРЯДОЧИТЬ ПО
	|	Метод,
	|	НачалоВыполнения
	|АВТОУПОРЯДОЧИВАНИЕ";

	Результаты = Запрос.ВыполнитьПакет();

	ИспользованныеМетоды = Результаты[1].Выбрать();

	ИменаКолонокДляДобавления = Новый Массив;

	Пока ИспользованныеМетоды.Следующий() Цикл
		ПараметрыМетода = мзЗаданияПовтИсп.ОписаниеПараметровМетода(ИспользованныеМетоды.Метод);
		Для Каждого ОписаниеПараметра Из ПараметрыМетода Цикл
			// TODO: добавить колонки на форму
		КонецЦикла;
	КонецЦикла;

	Выборка = Результаты[2].Выбрать();

	ДанныеЗаданий = ТаблицаЗаданий.Выгрузить();
	ДанныеЗаданий.Очистить();

	Пока Выборка.Следующий() Цикл

		ПараметрыЗадания = Выборка.Параметры.Получить();

		СтрокаЗадания = ДанныеЗаданий.Добавить();
		СтрокаЗадания.КлючЗадания = Выборка.Ключ;
		СтрокаЗадания.Метод = Выборка.Метод;
		
//		Если ТипЗнч(ПараметрыЗадания) = Тип("Структура") Тогда
//			ПараметрыЗадания.Свойство("ДатаНачала", СтрокаЗадания.ДатаНачала);
//			ПараметрыЗадания.Свойство("ДатаОкончания", СтрокаЗадания.ДатаОкончания);
//		КонецЕсли;

	КонецЦикла;

	ТаблицаЗаданий.Загрузить(ДанныеЗаданий);

	ОбновитьСостояниеЗаданийНаСервере();

//	Если ДанныеЗаданий.Количество() > 0 Тогда
//		Период.ДатаНачала = ДанныеЗаданий[0].ДатаНачала;
//		Период.ДатаОкончания = ДанныеЗаданий[ДанныеЗаданий.Количество() - 1].ДатаОкончания;
//	КонецЕсли;

КонецПроцедуры

#КонецОбласти